常见的数据结构：
1、数组
2、链表（上、下）
相比较链表、为什么数组能够更好的利用 CPU 的缓存？
因为数组申请的是连续的内存空间，而链表在内存中不是连续的。

CPU 从内存中读数据的时候，会把取到的数据加载到CPU的缓存中，而CPU每次从内存中读取数据不是读取
特定的要访问的地址，而是读取一个数据块，并保存到CPU缓存中，然后下次访问的时候就会先从CPU的缓存
中开始查找，如果找不到就从内存中去找。这样就实现了比内存访问速度更快的机制。
CPU缓存存在的意义：为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。

对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标也加载到CPU缓存中，这样
执行速度会快于存储空间不连续的链表存储。
3、栈：经典使用===>函数调用栈（数组和链表都可以实现栈和队列）
4、队列：经典使用===>线程池、阻塞队列、并发队列
5、递归算法：传递和回归===>两个步鄹，算法的核心就是找到如何把大问题分解成小问题，然后找到终止条件。
常见问题：堆栈溢出、重复计算、函数调用多、时间复杂度高等